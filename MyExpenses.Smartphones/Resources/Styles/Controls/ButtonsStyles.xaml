<ResourceDictionary xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
                    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
                    xmlns:converters="clr-namespace:MyExpenses.Smartphones.Resources.Styles.Converters"
                    xmlns:system="clr-namespace:System;assembly=System.Runtime"
                    xmlns:assists="clr-namespace:MyExpenses.Smartphones.Resources.Styles.Assists">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary>
            <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
            <converters:BorderClipConverter x:Key="BorderClipConverter" />
            <converters:BrushOpacityConverter x:Key="BrushOpacityConverter" />
        </ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>

    <converters:RangeLengthConverter x:Key="RangeLengthConverter" />
    <converters:MathConverter x:Key="MathAddConverter" Operation="Add" />
    <system:Int32 x:Key="ProgressRingStrokeWidth">8</system:Int32>
    <converters:SolidColorBrushToSolidColorBrushContrastingForegroundColorConverter x:Key="SolidColorBrushToSolidColorBrushContrastingForegroundColorConverter" />

    <!-- RaiseButton -->

    <Style x:Key="RaisedMidButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource PrimaryMid}" />
        <Setter Property="BorderColor" Value="{DynamicResource PrimaryMid}" />
        <Setter Property="BorderWidth" Value="1" />
        <Setter Property="TextColor" Value="White" />
        <Setter Property="Height" Value="32" />
        <Setter Property="HorizontalOptions" Value="Center" />
        <Setter Property="VerticalOptions" Value="Center" />
        <Setter Property="Padding" Value="16,4,16,4" />
        <!-- <Setter Property="Template"> -->
        <!--   <Setter.Value> -->
        <!--     <ControlTemplate TargetType="{x:Type ButtonBase}"> -->
        <!--       <Grid> -->
        <!--         <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(wpf:ShadowAssist.CacheMode)}"> -->
        <!--           <Grid> -->
        <!--             <Border x:Name="border" -->
        <!--                     Background="{TemplateBinding Background}" -->
        <!--                     BorderBrush="{TemplateBinding BorderBrush}" -->
        <!--                     BorderThickness="{TemplateBinding BorderThickness}" -->
        <!--                     CornerRadius="{Binding Path=(wpf:ButtonAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" -->
        <!--                     Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ElevationAssist.Elevation), Converter={x:Static converters:ShadowConverter.Instance}}" /> -->
        <!--             <ProgressBar x:Name="ProgressBar" -->
        <!--                          Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ButtonBase}}, Path=ActualWidth}" -->
        <!--                          Height="{TemplateBinding Height}" -->
        <!--                          HorizontalAlignment="Left" -->
        <!--                          VerticalAlignment="Center" -->
        <!--                          Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.IndicatorBackground)}" -->
        <!--                          BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.IndicatorBackground)}" -->
        <!--                          Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.IndicatorForeground)}" -->
        <!--                          IsIndeterminate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.IsIndeterminate)}" -->
        <!--                          Maximum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.Maximum)}" -->
        <!--                          Minimum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.Minimum)}" -->
        <!--                          Opacity="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.Opacity)}" -->
        <!--                          Style="{DynamicResource MaterialDesignLinearProgressBar}" -->
        <!--                          Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.IsIndicatorVisible), Converter={StaticResource BooleanToVisibilityConverter}}" -->
        <!--                          Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.Value)}"> -->
        <!--               <ProgressBar.Clip> -->
        <!--                 <MultiBinding Converter="{StaticResource BorderClipConverter}"> -->
        <!--                   <Binding ElementName="border" Path="ActualWidth" /> -->
        <!--                   <Binding ElementName="border" Path="ActualHeight" /> -->
        <!--                   <Binding ElementName="border" Path="CornerRadius" /> -->
        <!--                   <Binding ElementName="border" Path="BorderThickness" /> -->
        <!--                 </MultiBinding> -->
        <!--               </ProgressBar.Clip> -->
        <!--             </ProgressBar> -->
        <!--           </Grid> -->
        <!--         </AdornerDecorator> -->
        <!--         <wpf:Ripple Padding="{TemplateBinding Padding}" -->
        <!--                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" -->
        <!--                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" -->
        <!--                     Content="{TemplateBinding Content}" -->
        <!--                     ContentStringFormat="{TemplateBinding ContentStringFormat}" -->
        <!--                     ContentTemplate="{TemplateBinding ContentTemplate}" -->
        <!--                     Focusable="False" -->
        <!--                     SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"> -->
        <!--           <wpf:Ripple.Clip> -->
        <!--             <MultiBinding Converter="{StaticResource BorderClipConverter}"> -->
        <!--               <Binding ElementName="border" Path="ActualWidth" /> -->
        <!--               <Binding ElementName="border" Path="ActualHeight" /> -->
        <!--               <Binding ElementName="border" Path="CornerRadius" /> -->
        <!--               <Binding ElementName="border" Path="BorderThickness" /> -->
        <!--             </MultiBinding> -->
        <!--           </wpf:Ripple.Clip> -->
        <!--         </wpf:Ripple> -->
        <!--       </Grid> -->
        <!--       <ControlTemplate.Triggers> -->
        <!--         <Trigger Property="IsMouseOver" Value="true"> -->
        <!--           <Setter TargetName="border" Property="wpf:ShadowAssist.Darken" Value="True" /> -->
        <!--         </Trigger> -->
        <!--         <Trigger Property="IsKeyboardFocused" Value="true"> -->
        <!--           <Setter TargetName="border" Property="wpf:ShadowAssist.Darken" Value="True" /> -->
        <!--         </Trigger> -->
        <!--         <Trigger Property="IsEnabled" Value="false"> -->
        <!--           <Setter Property="Opacity" Value="0.38" /> -->
        <!--         </Trigger> -->
        <!--       </ControlTemplate.Triggers> -->
        <!--     </ControlTemplate> -->
        <!--   </Setter.Value> -->
        <!-- </Setter> -->
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontAttributes" Value="None" />
        <Setter Property="CornerRadius" Value="2" />
        <!-- <Setter Property="Opacity" Value=".4" /> -->
    </Style>

    <Style x:Key="RaisedLightButton"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource RaisedMidButton}">
        <Setter Property="Background" Value="{DynamicResource PrimaryLight}" />
        <Setter Property="BorderColor" Value="{DynamicResource PrimaryLight}" />
        <Setter Property="TextColor" Value="{DynamicResource White}" />
    </Style>

    <Style x:Key="RaisedDarkButton"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource RaisedMidButton}">
        <Setter Property="Background" Value="{DynamicResource PrimaryDark}" />
        <Setter Property="BorderColor" Value="{DynamicResource PrimaryDark}" />
        <Setter Property="TextColor" Value="{DynamicResource White}" />
    </Style>

    <Style x:Key="RaisedSecondaryMidButton"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource RaisedMidButton}">
        <Setter Property="Background" Value="{DynamicResource SecondaryMid}" />
        <Setter Property="BorderColor" Value="{DynamicResource SecondaryMid}" />
        <Setter Property="TextColor" Value="{DynamicResource Black}" />
    </Style>

    <Style x:Key="RaisedSecondaryLightButton"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource RaisedMidButton}">
        <Setter Property="Background" Value="{DynamicResource SecondaryLight}" />
        <Setter Property="BorderColor" Value="{DynamicResource SecondaryLight}" />
        <Setter Property="TextColor" Value="{DynamicResource Black}" />
    </Style>

    <Style x:Key="RaisedSecondaryDarkButton"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource RaisedMidButton}">
        <Setter Property="Background" Value="{DynamicResource SecondaryDark}" />
        <Setter Property="BorderColor" Value="{DynamicResource SecondaryDark}" />
        <Setter Property="TextColor" Value="{DynamicResource White}" />
    </Style>

    <!-- End RaiseButton -->

    <!-- Flat Flat Button -->

    <Style x:Key="FlatMidButton" TargetType="{x:Type Button}">
        <Setter Property="BackgroundColor" Value="Transparent" />
        <Setter Property="BorderColor" Value="Transparent" />
        <Setter Property="BorderWidth" Value="0" />
        <!-- <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" /> -->
        <Setter Property="TextColor" Value="{DynamicResource PrimaryMid}" />
        <Setter Property="Height" Value="32" />
        <Setter Property="HorizontalOptions" Value="Center" />
        <Setter Property="VerticalOptions" Value="Center" />
        <Setter Property="Padding" Value="16,4,16,4" />
        <!-- <Setter Property="Template"> -->
        <!--     <Setter.Value> -->
        <!--         <ControlTemplate TargetType="{x:Type ButtonBase}"> -->
        <!--             <Grid> -->
        <!--                 <Border x:Name="border" -->
        <!--                         Background="{TemplateBinding Background}" -->
        <!--                         BorderBrush="{TemplateBinding BorderBrush}" -->
        <!--                         BorderThickness="{TemplateBinding BorderThickness}" -->
        <!--                         CornerRadius="{Binding Path=(wpf:ButtonAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" /> -->
        <!--                 <ProgressBar x:Name="ProgressBar" -->
        <!--                              Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ButtonBase}}, Path=ActualWidth}" -->
        <!--                              Height="{TemplateBinding Height}" -->
        <!--                              HorizontalAlignment="Left" -->
        <!--                              VerticalAlignment="Center" -->
        <!--                              Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.IndicatorBackground)}" -->
        <!--                              BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.IndicatorBackground)}" -->
        <!--                              Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.IndicatorForeground)}" -->
        <!--                              IsIndeterminate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.IsIndeterminate)}" -->
        <!--                              Maximum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.Maximum)}" -->
        <!--                              Minimum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.Minimum)}" -->
        <!--                              Opacity="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.Opacity)}" -->
        <!--                              Style="{DynamicResource MaterialDesignLinearProgressBar}" -->
        <!--                              Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.IsIndicatorVisible), Converter={StaticResource BooleanToVisibilityConverter}}" -->
        <!--                              Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.Value)}"> -->
        <!--                     <ProgressBar.Clip> -->
        <!--                         <MultiBinding Converter="{StaticResource BorderClipConverter}"> -->
        <!--                             <Binding ElementName="border" Path="ActualWidth" /> -->
        <!--                             <Binding ElementName="border" Path="ActualHeight" /> -->
        <!--                             <Binding ElementName="border" Path="CornerRadius" /> -->
        <!--                             <Binding ElementName="border" Path="BorderThickness" /> -->
        <!--                         </MultiBinding> -->
        <!--                     </ProgressBar.Clip> -->
        <!--                 </ProgressBar> -->
        <!-- -->
        <!--                 <wpf:Ripple Padding="{TemplateBinding Padding}" -->
        <!--                             HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" -->
        <!--                             VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" -->
        <!--                             Content="{TemplateBinding Content}" -->
        <!--                             ContentStringFormat="{TemplateBinding ContentStringFormat}" -->
        <!--                             ContentTemplate="{TemplateBinding ContentTemplate}" -->
        <!--                             Focusable="False" -->
        <!--                             SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"> -->
        <!--                     <wpf:Ripple.Clip> -->
        <!--                         <MultiBinding Converter="{StaticResource BorderClipConverter}"> -->
        <!--                             <Binding ElementName="border" Path="ActualWidth" /> -->
        <!--                             <Binding ElementName="border" Path="ActualHeight" /> -->
        <!--                             <Binding ElementName="border" Path="CornerRadius" /> -->
        <!--                             <Binding ElementName="border" Path="BorderThickness" /> -->
        <!--                         </MultiBinding> -->
        <!--                     </wpf:Ripple.Clip> -->
        <!--                 </wpf:Ripple> -->
        <!--             </Grid> -->
        <!--             <ControlTemplate.Triggers> -->
        <!--                 <Trigger Property="IsMouseOver" Value="true"> -->
        <!--                     <Setter TargetName="border" Property="Background" -->
        <!--                             Value="{Binding Foreground, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource BrushOpacityConverter}, ConverterParameter=0.16}" /> -->
        <!--                 </Trigger> -->
        <!--                 <Trigger Property="IsEnabled" Value="false"> -->
        <!--                     <Setter Property="Opacity" Value="0.38" /> -->
        <!--                 </Trigger> -->
        <!--             </ControlTemplate.Triggers> -->
        <!--         </ControlTemplate> -->
        <!--     </Setter.Value> -->
        <!-- </Setter> -->
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontAttributes" Value="None" />
        <Setter Property="CornerRadius" Value="2" />
        <!-- <Setter Property="Opacity" Value=".4" /> -->
    </Style>

    <Style x:Key="FlatLightButton"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource FlatMidButton}">
        <Setter Property="TextColor" Value="{DynamicResource PrimaryLight}" />
    </Style>

    <Style x:Key="FlatDarkButton"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource FlatMidButton}">
        <Setter Property="TextColor" Value="{DynamicResource PrimaryDark}" />
    </Style>

    <Style x:Key="FlatSecondaryMidButton"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource FlatMidButton}">
        <Setter Property="TextColor" Value="{DynamicResource SecondaryMid}" />
    </Style>

    <Style x:Key="FlatSecondaryLightButton"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource FlatSecondaryMidButton}">
        <Setter Property="TextColor" Value="{DynamicResource SecondaryLight}" />
    </Style>

    <Style x:Key="FlatSecondaryDarkButton"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource FlatSecondaryMidButton}">
        <Setter Property="TextColor" Value="{DynamicResource SecondaryDark}" />
    </Style>

    <!-- End Flat Button -->

    <!-- Flat Background Button -->

    <Style x:Key="FlatLightBgButton"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource RaisedLightButton}">
        <Setter Property="assists:ElevationAssist.Elevation" Value="Dp0" />
    </Style>

    <Style x:Key="FlatMidBgButton"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource RaisedMidButton}">
        <Setter Property="assists:ElevationAssist.Elevation" Value="Dp0" />
    </Style>

    <Style x:Key="FlatDarkBgButton"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource RaisedDarkButton}">
        <Setter Property="assists:ElevationAssist.Elevation" Value="Dp0" />
    </Style>

    <Style x:Key="FlatSecondaryLightBgButton"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource RaisedSecondaryLightButton}">
        <Setter Property="assists:ElevationAssist.Elevation" Value="Dp0" />
    </Style>

    <Style x:Key="FlatSecondaryMidBgButton"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource RaisedSecondaryMidButton}">
        <Setter Property="assists:ElevationAssist.Elevation" Value="Dp0" />
    </Style>

    <Style x:Key="FlatSecondaryDarkBgButton"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource RaisedSecondaryDarkButton}">
        <Setter Property="assists:ElevationAssist.Elevation" Value="Dp0" />
    </Style>

    <!-- End Flat Background Button -->

    <!-- https://github.com/MaterialDesignInXAML/MaterialDesignInXamlToolkit/blob/master/src/MaterialDesignThemes.Wpf/Themes/MaterialDesignTheme.Button.xaml -->

</ResourceDictionary>